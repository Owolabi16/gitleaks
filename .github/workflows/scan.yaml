name: Gitleaks Secret Scanner

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Nightly at 2 AM
  workflow_dispatch:
    inputs:
      scan_mode:
        description: 'Scan mode'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - diff-only

env:
  GITLEAKS_VERSION: 8.18.0

jobs:
  secret-scan:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for complete scan
      
      - name: Set Scan Mode
        id: scan_mode
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.inputs.scan_mode }}" != "full" ]; then
            echo "mode=diff-only" >> $GITHUB_OUTPUT
          else
            echo "mode=${{ github.event.inputs.scan_mode || 'full' }}" >> $GITHUB_OUTPUT
          fi
    
      - name: Install Dependencies
        run: |
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq
          
          # Install Gitleaks
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz
          tar -xzf gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version
      
      - name: Run Gitleaks (Full History)
        if: steps.scan_mode.outputs.mode == 'full'
        run: |
          echo "üîç Running full historical scan..."
          gitleaks detect \
            --source=. \
            --report-format=json \
            --report-path=gitleaks-report.json \
            --no-banner \
            --redact=false \
            --exit-code=0  # Don't fail on findings, we'll handle this later
      
      - name: Run Gitleaks (Diff Only)
        if: steps.scan_mode.outputs.mode == 'diff-only'
        run: |
          echo "üîç Running diff-only scan..."
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            git diff ${BASE_SHA}...${HEAD_SHA} > diff.patch
            gitleaks protect \
              --source=. \
              --report-format=json \
              --report-path=gitleaks-report.json \
              --no-banner \
              --staged \
              --exit-code=0
          else
            gitleaks protect \
              --source=. \
              --report-format=json \
              --report-path=gitleaks-report.json \
              --no-banner \
              --exit-code=0
          fi
      
      - name: Extract Context and Generate Summary
        if: always()
        run: |
          .github/scripts/parse-gitleaks-context.sh \
            --report gitleaks-report.json \
            --mode ${{ steps.scan_mode.outputs.mode }}
      
      - name: Upload Gitleaks Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: |
            gitleaks-report.json
            gitleaks-summary.md
          retention-days: 30
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('gitleaks-summary.md')) {
              const summary = fs.readFileSync('gitleaks-summary.md', 'utf8');
              if (summary.includes('üö®')) {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: summary
                });
              }
            }
      
      - name: Check for Critical Secrets
        if: always()
        run: |
          if [ -f gitleaks-report.json ]; then
            CRITICAL_COUNT=$(jq '[.[] | select(.RuleID | ascii_downcase | test("aws[-_]access|private[-_]key|github[-_]pat"))] | length' gitleaks-report.json)
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "‚ùå Found $CRITICAL_COUNT critical secrets!"
              exit 1
            fi
          fi
